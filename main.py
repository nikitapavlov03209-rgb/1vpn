# 1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
def build_subscription_text(user: User) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    if not user.subscription_expires_at or user.subscription_expires_at < datetime.utcnow():
        return ""  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        servers = (
            db.query(Server)
              .join(UserServer, Server.id == UserServer.server_id)
              .filter(UserServer.user_id == user.id, Server.enabled == True)
              .all()
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        lines = [build_uri(s) for s in servers]
        return "\n".join(lines) + "\n"  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
    finally:
        db.close()

# 2. Endpoint –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —é–∑–µ—Ä–æ–≤
@api.get("/s/{token}", response_class=PlainTextResponse)
def subscription(token: str):
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ç–æ–∫–µ–Ω—É
        user = db.query(User).filter_by(sub_token=token).one_or_none()
        if not user:
            raise HTTPException(status_code=404, detail="Invalid token")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã
        return PlainTextResponse(build_subscription_text(user), media_type="text/plain; charset=utf-8")
    finally:
        db.close()

# 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø–µ—Ä–∏–æ–¥–∞
def extend_subscription_days(user_id: int, days: int):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."""
    db = SessionLocal()
    try:
        user = db.query(User).filter_by(id=user_id).one()
        now = datetime.utcnow()
        start = user.subscription_expires_at if (user.subscription_expires_at and user.subscription_expires_at > now) else now
        user.subscription_expires_at = start + timedelta(days=days)
        db.commit()
        return user.subscription_expires_at
    finally:
        db.close()

# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "pay_menu")
async def cb_pay_menu(c: CallbackQuery):
    """–ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
    dbs = SessionLocal()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        p30 = dbs.query(Plan).filter_by(code="30d").one()
        p90 = dbs.query(Plan).filter_by(code="90d").one()
        p270 = dbs.query(Plan).filter_by(code="270d").one()
    finally:
        dbs.close()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üóì 30 –¥–Ω–µ–π ‚Äî ${p30.usd_price:.2f}", callback_data="buy_30d")],
        [InlineKeyboardButton(text=f"üóì 90 –¥–Ω–µ–π ‚Äî ${p90.usd_price:.2f}", callback_data="buy_90d")],
        [InlineKeyboardButton(text=f"üóì 270 –¥–Ω–µ–π ‚Äî ${p270.usd_price:.2f}", callback_data="buy_270d")],
        [InlineKeyboardButton(text="üíº –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="wallet")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb); await c.answer()

@dp.callback_query(F.data.in_({"buy_30d", "buy_90d", "buy_270d"}))
async def cb_buy_subscription(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞."""
    code = c.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫: 30d|90d|270d
    plan = get_plan(code)
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter_by(tg_id=c.from_user.id).one()
        price = plan.usd_price

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å
        if user.balance + 1e-9 < price:
            need = price - user.balance
            await c.answer()
            await c.message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è ${price:.2f}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ${user.balance:.2f} "
                f"(–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${need:.2f}). –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å."
            )
            return
        
        # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        user.balance -= price

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        extend_subscription_days(user.id, plan.days)

        db.commit()

        await c.answer()
        await c.message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞: -${price:.2f}\n"
            f"–°—Ä–æ–∫: {plan.days} –¥–Ω–µ–π. –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_expires_at}."
        )
    finally:
        db.close()

# 5. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def assign_all_servers_to_user(user: User):
    db = SessionLocal()
    try:
        current = {us.server_id for us in db.query(UserServer).filter_by(user_id=user.id).all()}
        for s in db.query(Server).filter_by(enabled=True).all():
            if s.id not in current:
                db.add(UserServer(user_id=user.id, server_id=s.id))
        db.commit()
    finally:
        db.close()

@dp.callback_query(F.data == "keys")
async def cb_keys(c: CallbackQuery):
    user = get_or_create_user(c.from_user.id)
    sub_url = f"{BASE_URL}/s/{user.sub_token}"
    await c.message.edit_text(
        "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ V2RayN/V2RayNG/Shadowrocket/NekoRay:\n"
        f"<code>{sub_url}</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))
    await c.answer()

# -------- –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –≤ –ø–æ–¥–ø–∏—Å–∫—É --------
@dp.message()
async def admin_text_router(msg: Message):
    if not is_admin(msg.from_user.id): return
    sess = ADMIN_SESSIONS.get(msg.from_user.id)
    if not sess: return
    mode = sess.get("mode")

    # –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ–≥–¥–∞ –æ–Ω –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    if mode == "add_servers_to_user":
        user = get_or_create_user(msg.from_user.id)
        assign_all_servers_to_user(user)
        await msg.answer(f"–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}.")
        ADMIN_SESSIONS.pop(msg.from_user.id, None)
